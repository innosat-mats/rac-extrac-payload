package aez

import (
	"reflect"
	"testing"

	"github.com/innosat-mats/rac-extract-payload/internal/innosat"
)

func TestPackages(t *testing.T) {
	type args struct {
		input innosat.SourcePackage
		want  PackageType
	}
	tests := []struct {
		name string
		args args
	}{
		{
			"Empty package",
			args{
				innosat.SourcePackage{},
				nil,
			},
		},
		{
			"STAT package",
			args{
				innosat.SourcePackage{
					innosat.SourcePacketHeader{0x0864, 0xc89a, 0x31},
					innosat.TMDataFieldHeader{16, 3, 0x19, 0, 0},
					[]byte{0x00, 0x01, 0x7f, 0x04, 0x02, 0x82,
						0x04, 0x02, 0x02, 0x06, 0x01, 0x1b, 0x12, 0x00, 0x00, 0xef, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0xa5, 0xd5},
				},
				STAT{32516, 2, 33284, 2, 2, 6, 1, 454164480, 61344, 2, 0, 0, 16777216, 1090519040, 0, 0},
			},
		},
		{
			"Bad package",
			args{
				innosat.SourcePackage{
					innosat.SourcePacketHeader{0x0864, 0xc89a, 0x31},
					innosat.TMDataFieldHeader{16, 3, 0x19, 0, 0},
					[]byte{0x00, 0x01, 0x7f, 0x04, 0x02, 0x82,
						0x04, 0x02, 0x02, 0x06, 0x01, 0x1b, 0x12, 0x00, 0x00, 0xef, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				STAT{},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			source := make(chan innosat.SourcePackage)
			target := make(chan PackageType)
			go Packages(source, target)
			source <- tt.args.input
			close(source)
			got := <-target
			if !reflect.DeepEqual(got, tt.args.want) {
				t.Errorf("Package.Payload = %v, want %v", got, tt.args.want)
			}
		})
	}
}
